openapi: 3.0.3
info:
  version: 'latest'
  title: Onirix API
servers:
  - url: http://localhost:8080/backend/


paths:
  /ping:
    get:
      tags:
        - Security
      summary: pong
      operationId: ping
      security: [ ]
      description: Check server health
      responses:
        200:
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
        500:
          $ref: '#/components/responses/500'
  /users:
    post:
      tags:
        - User
      summary: Create an user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        200:
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'

  /users/{id}:
    get:
      tags:
        - User
      summary: Get user by identifier
      operationId: getUserById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Required user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'

  /users/{id}/dreams:
    get:
      tags:
        - User
      summary: Get user dreams
      operationId: getDreamsByUserId
      security:
        - BearerAuth: []
      parameters:
        - name: id
          description: user identifier
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of dreams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dream'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'

  /dreams:
    get:
      tags:
        - User
      summary: Get all anonymously dreams
      operationId: getDreams
      security:
        - BearerAuth: []
      responses:
        200:
          description: List of dreams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dream'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: basic
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    429:
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    CreateUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        userName:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
      allOf:
        - $ref: "#/components/schemas/CreateUser"
    Dream:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        userId:
          type: integer

    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error